using Microsoft.AspNetCore.Mvc;
using System.Text.Json;
using uniBuddyAPI.Models;
using uniBuddyAPI.Services;
using System.Linq;

namespace uniBuddyAPI.Controllers
{
    [ApiController]
    [Route("calendar")]
    [Produces("application/json")]
    public class CalendarController : Controller
    {
        private readonly RealTimeDbService _db;
        public CalendarController(RealTimeDbService db)
        {
            _db = db;
        }

        [HttpPost("{userId}")] //adding a calendar event for logged in user
        public async Task<IActionResult> AddEvent(string userId, [FromBody] CalendarEvent body) 
        {
            if (string.IsNullOrWhiteSpace(userId))
                return BadRequest(new { message = "The userId is required" });

            if (body == null || string.IsNullOrWhiteSpace(body.Title))
                return BadRequest(new { message = "Title is required" });

            var evnt = new CalendarEvent
            {
                //EventId generated by Firebase on POST
                UserId = userId,
                Title = body.Title,
                Location = body.Location,
                CourseId = body.CourseId,
                Notes = body.Notes,
                EventDate = body.EventDate?.Trim() //"yyyy-MM-dd"
            };

            var response = await _db.Client.PostAsJsonAsync($"/calendar-events/{userId}.json", evnt); //post to firebase

            if (response.IsSuccessStatusCode)
            {
                var resultContent = await response.Content.ReadAsStringAsync(); //reading the firebase response
                return Ok(new { message = "Event saved successfully", data = resultContent }); // when events save successfully then return success
            }
            return BadRequest(new { message = "Failed to save your event" }); //bad request if fail to save
        }

        [HttpGet("{userId}")] //getting the logged-in user's events
        public async Task<IActionResult> GetEvents(string userId, [FromQuery] string? courseId = null)
        {
            if (string.IsNullOrWhiteSpace(userId))
                return BadRequest(new { message = "The userId is required" });

            var response = await _db.Client.GetAsync($"/calendar-events/{userId}.json"); //getting calendar events from firebase
            if (!response.IsSuccessStatusCode)
                return BadRequest(new { message = "Could not load events" }); //if none then return this bad req

            var json = await response.Content.ReadAsStringAsync();
            if (string.IsNullOrWhiteSpace(json) || json == "null") //tell user theres no events if nothing in fb
                return NotFound(new { message = "you have no events saved yet" });

            Dictionary<string, CalendarEvent>? usersEvents;
            try
            {
                //Code Attribution
                //The PropertyNameCaseInsensitive option has been created with the help of StackOverflow
                //https://stackoverflow.com/questions/45782127/json-net-case-insensitive-deserialization-not-working
                //Ziaullah Khan
                //https://stackoverflow.com/users/3312570/ziaullah-khan
                usersEvents = JsonSerializer.Deserialize<Dictionary<string, CalendarEvent>>(json, new JsonSerializerOptions
                {
                    PropertyNameCaseInsensitive = true
                });
            }
            catch
            {
                return Ok(new List<CalendarEvent>()); //keep app safe from crash
            }

            var list = new List<CalendarEvent>();
            if (usersEvents != null)
            {
                foreach (var entry in usersEvents)
                {
                    entry.Value.EventId = entry.Key; //firebase key as event id
                    entry.Value.UserId = userId; //making sure user id is set
                    list.Add(entry.Value);
                }
            }

            if (!string.IsNullOrWhiteSpace(courseId))
            {
                list = list.Where(e => string.Equals(e.CourseId, courseId, StringComparison.OrdinalIgnoreCase)).ToList();
            }

            return Ok(list); //return list of users events
        }

        [HttpDelete("{userId}/{eventId}")] //deleting a specific event for a user
        public async Task<IActionResult> DeleteEvent(string userId, string eventId)
        {
            if (string.IsNullOrWhiteSpace(userId) || string.IsNullOrWhiteSpace(eventId))
                return BadRequest(new { message = "userId and eventId are required" }); //cant get anything if no logged in user (just error handling)

            var response = await _db.Client.DeleteAsync($"/calendar-events/{userId}/{eventId}.json"); //deleting from firebase

            if (response.IsSuccessStatusCode)
                return Ok(new { message = "Event deleted" });

            return BadRequest(new { message = "Could not delete event" }); //if delete failed 
        }

        [HttpGet("global")] //read-only global (preloaded) events
        public async Task<IActionResult> GetGlobalEvents([FromQuery] string? courseId = null)
        {
            var response = await _db.Client.GetAsync("/calendar-global.json"); //reading all proloaded global events from firebase
            if (!response.IsSuccessStatusCode) return BadRequest(new { message = "Could not load global events" });

            var json = await response.Content.ReadAsStringAsync(); 
            if (string.IsNullOrWhiteSpace(json) || json == "null") return Ok(new List<CalendarEvent>()); //return empty list if nothing found 

            Dictionary<string, CalendarEvent>? globalEvents;
            try
            {
                globalEvents = JsonSerializer.Deserialize<Dictionary<string, CalendarEvent>>(json, new JsonSerializerOptions
                {
                    PropertyNameCaseInsensitive = true
                });
            }
            catch
            {
                return Ok(new List<CalendarEvent>()); //try catch to ensure no crashing of api on fail
            }

            var list = new List<CalendarEvent>(); //dictionary to list and theres no user id bc global events for everyone
            if (globalEvents != null)
            {
                foreach (var entry in globalEvents)
                {
                    entry.Value.EventId = entry.Key; //Firebase key
                    //UserId stays null for global
                    list.Add(entry.Value);
                }
            }

            if (!string.IsNullOrWhiteSpace(courseId))
                list = list.Where(e => string.Equals(e.CourseId, courseId, StringComparison.OrdinalIgnoreCase)).ToList(); //filtering by courseId
            return Ok(list);
        }
    }
}
